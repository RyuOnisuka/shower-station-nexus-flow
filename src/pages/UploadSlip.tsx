import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { toast } from 'sonner';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, Upload, CheckCircle, Clock } from 'lucide-react';
import { useQueues } from '@/hooks/useDatabase';
import { supabase } from '@/integrations/supabase/client';

const UploadSlip = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const navigate = useNavigate();
  
  const { data: queues } = useQueues();
  const userData = JSON.parse(localStorage.getItem('userData') || '{}');

  const activeQueue = queues?.find(q => 
    q.user?.phone_number === userData.phone_number &&
    q.status === 'called' && 
    (!q.payment || q.payment.every((p: any) => p.status !== 'approved'))
  );

  const pendingPaymentQueue = queues?.find(q => 
    q.user?.phone_number === userData.phone_number &&
    q.payment && q.payment.some((p: any) => p.status === 'pending')
  );

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô');
      return;
    }

    if (!activeQueue) {
      toast.error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
      return;
    }

    setIsUploading(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const { error } = await supabase
        .from('payments')
        .insert({
          queue_id: activeQueue.id,
          amount: activeQueue.price,
          payment_method: 'transfer',
          slip_url: `slip_${activeQueue.queue_number}_${Date.now()}.jpg`,
          status: 'pending'
        });

      if (error) throw error;

      toast.success('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà');
      navigate('/dashboard');
    } catch (error) {
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î');
      console.error('Upload error:', error);
    } finally {
      setIsUploading(false);
    }
  };

  // Show pending payment status
  if (pendingPaymentQueue) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="max-w-md mx-auto space-y-4">
          <div className="flex items-center space-x-3">
            <Button variant="ghost" size="sm" onClick={() => navigate('/dashboard')}>
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <h1 className="text-xl font-semibold">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h1>
          </div>
          
          <Card className="border-yellow-200 bg-yellow-50">
            <CardHeader>
              <CardTitle className="text-lg text-yellow-700 flex items-center space-x-2">
                <Clock className="h-5 w-5" />
                <span>‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <span>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß:</span>
                  <Badge variant="outline" className="text-lg font-bold">
                    {pendingPaymentQueue.queue_number}
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</span>
                  <span className="font-semibold text-lg">‡∏ø{pendingPaymentQueue.price}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
                  <Badge className="bg-yellow-500 hover:bg-yellow-600">
                    ‡∏£‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                  </Badge>
                </div>
              </div>
              
              <div className="mt-4 p-3 bg-yellow-100 rounded-lg">
                <p className="text-sm text-yellow-800">
                  üìÑ ‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                  <br />
                  ‚è∞ ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ
                  <br />
                  ‚úÖ ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏π‡πâ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå
                </p>
              </div>

              <Button 
                onClick={() => navigate('/dashboard')}
                className="w-full mt-4"
                variant="outline"
              >
                ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  if (!activeQueue) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="max-w-md mx-auto space-y-4">
          <div className="flex items-center space-x-3">
            <Button variant="ghost" size="sm" onClick={() => navigate('/dashboard')}>
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <h1 className="text-xl font-semibold">‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏≠‡∏ô/‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ</h1>
          </div>
          
          <Card>
            <CardContent className="p-6 text-center">
              <div className="text-6xl mb-4">‚ùå</div>
              <h2 className="text-lg font-semibold mb-2">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h2>
              <p className="text-gray-600 mb-4">
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
              </p>
              <Button onClick={() => navigate('/dashboard')}>
                ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-md mx-auto space-y-4">
        <div className="flex items-center space-x-3">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => navigate('/dashboard')}
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-xl font-semibold">‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏≠‡∏ô/‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ</h1>
        </div>

        <Card className="border-green-200 bg-green-50">
          <CardHeader>
            <CardTitle className="text-lg text-green-700 flex items-center space-x-2">
              <CheckCircle className="h-5 w-5" />
              <span>‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß!</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß:</span>
                <Badge variant="outline" className="text-lg font-bold">
                  {activeQueue.queue_number}
                </Badge>
              </div>
              <div className="flex justify-between items-center">
                <span>‡∏ä‡∏∑‡πà‡∏≠:</span>
                <span>{activeQueue.user?.first_name} {activeQueue.user?.last_name}</span>
              </div>
              <div className="flex justify-between items-center">
                <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</span>
                <span className="font-semibold text-lg">‡∏ø{activeQueue.price}</span>
              </div>
              <div className="flex justify-between items-center">
                <span>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
                <Badge className="bg-green-500 hover:bg-green-600">
                  ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-lg">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="bg-blue-50 p-3 rounded-lg">
              <p className="text-sm text-blue-700 font-medium">üì± ‡πÄ‡∏õ‡πã‡∏≤‡∏ï‡∏∏‡∏á KTB</p>
              <p className="text-xs text-blue-600 mt-1">
                1. ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå<br/>
                2. ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏ø{activeQueue.price}<br/>
                3. ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô<br/>
                4. ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
              </p>
            </div>
            
            <div className="bg-green-50 p-3 rounded-lg">
              <p className="text-sm text-green-700 font-medium">üí∞ PromptPay</p>
              <p className="text-xs text-green-600 mt-1">
                ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: 012-345-6789<br/>
                ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: Shower Station Co.,Ltd.<br/>
                ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ø{activeQueue.price}
              </p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-lg">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="slip">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ (JPG, PNG)</Label>
              <Input
                id="slip"
                type="file"
                accept="image/*"
                onChange={handleFileSelect}
                className="mt-1"
              />
              {selectedFile && (
                <p className="text-sm text-green-600 mt-1">
                  ‚úì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå: {selectedFile.name}
                </p>
              )}
            </div>

            <Button 
              onClick={handleUpload}
              className="w-full"
              disabled={!selectedFile || isUploading}
            >
              {isUploading ? (
                <>
                  <Upload className="mr-2 h-4 w-4 animate-spin" />
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...
                </>
              ) : (
                <>
                  <Upload className="mr-2 h-4 w-4" />
                  ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ
                </>
              )}
            </Button>

            <p className="text-xs text-gray-500 text-center">
              ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏£‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-lg">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</span>
                <span>{activeQueue.user?.phone_number}</span>
              </div>
              <div className="flex justify-between">
                <span>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</span>
                <span>{activeQueue.user?.email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
              </div>
              <div className="flex justify-between">
                <span>‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß:</span>
                <span>{new Date(activeQueue.created_at).toLocaleTimeString('th-TH')}</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default UploadSlip;
